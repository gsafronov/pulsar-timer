#include "PulseExtractor.h"

//add frequency weights resulting from frequency response
//add mask reading
//add mask calculation from frequency response


PulseExtractor::PulseExtractor()
{
}

PulseExtractor::~PulseExtractor()
{
}

PulseExtractor::PulseExtractor(BaseRun* run, float dm)
{
  fBaseRun=run;
  fDM=dm;

  fillSumProfile();

  fCompensatedSignal=SignalContainer(fSumProfile.numpointwin*fSumProfile.numpuls,0,fSumProfile.numpointwin*fSumProfile.numpuls+1);
}


int PulseExtractor::compensateDM()
{
  float dm=fDM;
  //define which bins current thread would sum
  //  std::cout<<fTau<<"  "<<fPeriod<<" "<<fNPeriods<<" "<<fNThreads<<"   start: "<<startPeriod<<"  "<<endPeriod<<std::endl;
  float nbins=fBaseRun->GetNumpuls()*fBaseRun->GetNumpointwin();
  for (int i=0; i<nbins; i++){
    //(i<=fNBinsPerPeriod)||i>fNBins-fNBinsPerPeriod) continue;
    
    //for (int i=1; i<fNBins+1; i++){
    float fDL=fabs(fBaseRun->GetWLLast()-fBaseRun->GetWLFirst())/512;
    float bico=0;
    for (int y=0; y<fBaseRun->GetNBands(); y++) {
      //take sigTimeProfile[511-y] as 511-th is shorter wavelength
      //calculate delay wrt 511th for particular freq[511-y]
      float dT=4.6*(-pow(fBaseRun->GetWLLast(),2)+pow(fBaseRun->GetWLLast()+y*fDL,2))*fDM*0.001; //covert to ms
      //calculate residual difference to nearest positive side pulse
      float dTnearest=dT-fBaseRun->GetPeriod()*floor(dT*pow(fBaseRun->GetPeriod(),-1));
      //move frequency band by -dTnearest bins, add lower bins to "upper side"
      float delta=dTnearest*pow(fBaseRun->GetTau(),-1);
      //float bico1=fSigArray[((fNFreq-1)-y)*fNBinsInput+int(floor(i+delta))];
      //float bico2=fSigArray[((fNFreq-1)-y)*fNBinsInput+int(floor(i+delta)+1)];
      //float bico1=sigArray[((511-y)*nBinsInput+int(floor(i+delta)))%(nBinsInput*nFreq)];
      //float bico2=sigArray[((511-y)*nBinsInput+int((floor(i+delta)+1)))%(nBinsInput*nFreq)];
      
      float bico1=fBaseRun->GetBandSignal((fBaseRun->GetNBands()-1)-y)
	->GetSignal((int(floor(i+delta)))%nbins);
      float bico2=fBaseRun->GetBandSignal((fBaseRun->GetNBands()-1)-y)
	->GetSignal((int((floor(i+delta)+1)))%nbins);
      float lowerBinFrac=1-((i+delta)-floor(i+delta));
      float upperBinFrac=1-lowerBinFrac;
      if (floor(i+delta)+1<fBaseRun->GetNPoints()) bico+=lowerBinFrac*bico1+upperBinFrac*bico2;
    }

    fCompensatedSignal.SetSignal(i-1,bico);
    //    std::cout<<"thread: "<<iThread<<"   bin index: "<<i-1<<"   value: "<<bico<<std::endl;
    //    if (bico==bico) fHCompSig[iStep]->Fill(i-1,bico);
  }
    return 0;
}

int PulseExtractor::fillSumProfile()
{
  fSumProfile.telcode = fBaseRun->GetTelcode();
  fSumProfile.obscode = fBaseRun->GetObscode();
  fSumProfile.rtype = fBaseRun->GetRtype();
  fSumProfile.psrname = fBaseRun->GetPsrname();
  fSumProfile.datatype = fBaseRun->GetDatatype();
  fSumProfile.npol = fBaseRun->GetNpol();

  fSumProfile.year = fBaseRun->GetYear();
  fSumProfile.month = fBaseRun->GetMonth();
  fSumProfile.day = fBaseRun->GetDay();
  fSumProfile.hour = fBaseRun->GetHour();
  fSumProfile.min = fBaseRun->GetMinute();
  fSumProfile.sec = fBaseRun->GetSecond();
  fSumProfile.nsec = fBaseRun->GetNsec();
  fSumProfile.utcyear = fBaseRun->GetUtcYear();
  fSumProfile.utcmonth = fBaseRun->GetUtcMonth();
  fSumProfile.utcday = fBaseRun->GetUtcDay();
  fSumProfile.utchour = fBaseRun->GetUtcHour();
  fSumProfile.utcmin = fBaseRun->GetUtcMinute();
  fSumProfile.utcsec = fBaseRun->GetUtcSecond();
  fSumProfile.utcnsec = fBaseRun->GetUtcNsec();

  fSumProfile.period = fBaseRun->GetPeriod();
  fSumProfile.numpuls = fBaseRun->GetNumpuls();
  fSumProfile.tay = fBaseRun->GetTau();
  fSumProfile.numpointwin = fBaseRun->GetNumpointwin();

  fSumProfile.freq = fBaseRun->GetFreqFirst();

  size_t size_profile=fSumProfile.numpointwin*sizeof(float);
  //host compensated DM
  prfdata=(float*)malloc(size_profile);
  
  for (int i=0; i<fSumProfile.numpointwin; i++) prfdata[i] = 0;
}

int PulseExtractor::DoCompensation()
{
  
}

